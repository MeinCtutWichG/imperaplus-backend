//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v4.2.6060.41613 (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace ImperaPlus.GeneratedClient
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class AccountClient : ImperaHttpClient
    {
        public AccountClient() : this("") { }
    
        public AccountClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Checks if a username is available</summary>
        /// <param name="userName">Username to check</param>
        /// <returns>True if username is available</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> GetUserNameAvailableAsync(string userName)
        {
            return GetUserNameAvailableAsync(userName, CancellationToken.None);
        }
    
        /// <summary>Checks if a username is available</summary>
        /// <param name="userName">Username to check</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>True if username is available</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> GetUserNameAvailableAsync(string userName, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/UserNameAvailable");
    
            if (userName != null)
                url_ += string.Format("userName={0}&", Uri.EscapeUriString(userName.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get user information</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserInfo> GetUserInfoAsync()
        {
            return GetUserInfoAsync(CancellationToken.None);
        }
    
        /// <summary>Get user information</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserInfo> GetUserInfoAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/UserInfo");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(UserInfo); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<UserInfo>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get user information for an external user (i.e., just logged in using an external provider)</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<UserInfo> GetExternalUserInfoAsync()
        {
            return GetExternalUserInfoAsync(CancellationToken.None);
        }
    
        /// <summary>Get user information for an external user (i.e., just logged in using an external provider)</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<UserInfo> GetExternalUserInfoAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ExternalUserInfo");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(UserInfo); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<UserInfo>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> LogoutAsync()
        {
            return LogoutAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> LogoutAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/Logout");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ManageInfoViewModel> GetManageInfoAsync(string returnUrl, bool? generateState)
        {
            return GetManageInfoAsync(returnUrl, generateState, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ManageInfoViewModel> GetManageInfoAsync(string returnUrl, bool? generateState, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ManageInfo");
    
            if (returnUrl != null)
                url_ += string.Format("returnUrl={0}&", Uri.EscapeUriString(returnUrl.ToString()));
    
            if (generateState == null)
                throw new ArgumentNullException("generateState");
            else
                url_ += string.Format("generateState={0}&", Uri.EscapeUriString(generateState.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ManageInfoViewModel); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ManageInfoViewModel>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> ChangePasswordAsync(ChangePasswordBindingModel model)
        {
            return ChangePasswordAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> ChangePasswordAsync(ChangePasswordBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ChangePassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> SetPasswordAsync(SetPasswordBindingModel model)
        {
            return SetPasswordAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> SetPasswordAsync(SetPasswordBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/SetPassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> SetLanguageAsync(LanguageModel model)
        {
            return SetLanguageAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> SetLanguageAsync(LanguageModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/Language");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> AddExternalLoginAsync(AddExternalLoginBindingModel model)
        {
            return AddExternalLoginAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> AddExternalLoginAsync(AddExternalLoginBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/AddExternalLogin");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> RemoveLoginAsync(RemoveLoginBindingModel model)
        {
            return RemoveLoginAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> RemoveLoginAsync(RemoveLoginBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/RemoveLogin");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> GetExternalLoginAsync(string provider)
        {
            return GetExternalLoginAsync(provider, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> GetExternalLoginAsync(string provider, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ExternalLogin");
    
            if (provider != null)
                url_ += string.Format("provider={0}&", Uri.EscapeUriString(provider.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<ExternalLoginViewModel>> GetExternalLoginsAsync(string returnUrl, bool? generateState)
        {
            return GetExternalLoginsAsync(returnUrl, generateState, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<ExternalLoginViewModel>> GetExternalLoginsAsync(string returnUrl, bool? generateState, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ExternalLogins");
    
            if (returnUrl != null)
                url_ += string.Format("returnUrl={0}&", Uri.EscapeUriString(returnUrl.ToString()));
    
            if (generateState == null)
                throw new ArgumentNullException("generateState");
            else
                url_ += string.Format("generateState={0}&", Uri.EscapeUriString(generateState.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<ExternalLoginViewModel>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<ExternalLoginViewModel>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> RegisterAsync(RegisterBindingModel model)
        {
            return RegisterAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> RegisterAsync(RegisterBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/Register");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Resend the email confirmation account to the given user account</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> ResendConfirmationCodeAsync(ResendConfirmationModel model)
        {
            return ResendConfirmationCodeAsync(model, CancellationToken.None);
        }
    
        /// <summary>Resend the email confirmation account to the given user account</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> ResendConfirmationCodeAsync(ResendConfirmationModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ResendConfirmation");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Confirm user account using code provided in mail</summary>
        /// <param name="model">Model containing id and code</param>
        /// <returns>Success if successfully activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> ConfirmEmailAsync(ConfirmationModel model)
        {
            return ConfirmEmailAsync(model, CancellationToken.None);
        }
    
        /// <summary>Confirm user account using code provided in mail</summary>
        /// <param name="model">Model containing id and code</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success if successfully activated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> ConfirmEmailAsync(ConfirmationModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ConfirmEmail");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Request password reset link</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> ForgotPasswordAsync(ForgotPasswordViewModel model)
        {
            return ForgotPasswordAsync(model, CancellationToken.None);
        }
    
        /// <summary>Request password reset link</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> ForgotPasswordAsync(ForgotPasswordViewModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ForgotPassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Reset password confirmation</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> ResetPasswordAsync(ResetPasswordViewModel model)
        {
            return ResetPasswordAsync(model, CancellationToken.None);
        }
    
        /// <summary>Reset password confirmation</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> ResetPasswordAsync(ResetPasswordViewModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ResetPassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Create user accout for an external login</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> RegisterExternalAsync(RegisterExternalBindingModel model)
        {
            return RegisterExternalAsync(model, CancellationToken.None);
        }
    
        /// <summary>Create user accout for an external login</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> RegisterExternalAsync(RegisterExternalBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/RegisterExternal");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class HistoryClient : ImperaHttpClient
    {
        public HistoryClient() : this("") { }
    
        public HistoryClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Gets the specified turn including the actions and current state of the map</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<HistoryTurn> GetTurnAsync(long gameId, long turnId)
        {
            return GetTurnAsync(gameId, turnId, CancellationToken.None);
        }
    
        /// <summary>Gets the specified turn including the actions and current state of the map</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<HistoryTurn> GetTurnAsync(long gameId, long turnId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/history/{turnId}");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            if (turnId == null)
                throw new ArgumentNullException("turnId");
            url_ = url_.Replace("{turnId}", Uri.EscapeUriString(turnId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(HistoryTurn); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<HistoryTurn>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class LadderClient : ImperaHttpClient
    {
        public LadderClient() : this("") { }
    
        public LadderClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns active ladders</summary>
        /// <returns>List of ladders</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<LadderSummary>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Returns active ladders</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of ladders</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<LadderSummary>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/ladder");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<LadderSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<LadderSummary>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Gets ladder identified by given id</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Ladder> GetAsync(Guid ladderId)
        {
            return GetAsync(ladderId, CancellationToken.None);
        }
    
        /// <summary>Gets ladder identified by given id</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Ladder> GetAsync(Guid ladderId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/ladder/{ladderId}");
    
            if (ladderId == null)
                throw new ArgumentNullException("ladderId");
            url_ = url_.Replace("{ladderId}", Uri.EscapeUriString(ladderId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Ladder); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Ladder>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Queue up for a new game in the given ladder</summary>
        /// <param name="ladderId">Ladder id</param>
        /// <returns>Status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PostJoinAsync(Guid ladderId)
        {
            return PostJoinAsync(ladderId, CancellationToken.None);
        }
    
        /// <summary>Queue up for a new game in the given ladder</summary>
        /// <param name="ladderId">Ladder id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PostJoinAsync(Guid ladderId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/ladder/{ladderId}/queue");
    
            if (ladderId == null)
                throw new ArgumentNullException("ladderId");
            url_ = url_.Replace("{ladderId}", Uri.EscapeUriString(ladderId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Gets ladder standings</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <param name="start">Items to skip before returning</param>
        /// <param name="count">Count of standings to return</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<LadderStanding>> GetStandingsAsync(Guid ladderId, int? start, int? count)
        {
            return GetStandingsAsync(ladderId, start, count, CancellationToken.None);
        }
    
        /// <summary>Gets ladder standings</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <param name="start">Items to skip before returning</param>
        /// <param name="count">Count of standings to return</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<LadderStanding>> GetStandingsAsync(Guid ladderId, int? start, int? count, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/ladder/{ladderId}/standings");
    
            if (ladderId == null)
                throw new ArgumentNullException("ladderId");
            url_ = url_.Replace("{ladderId}", Uri.EscapeUriString(ladderId.ToString()));
    
            if (start == null)
                throw new ArgumentNullException("start");
            else
                url_ += string.Format("start={0}&", Uri.EscapeUriString(start.Value.ToString()));
    
            if (count == null)
                throw new ArgumentNullException("count");
            else
                url_ += string.Format("count={0}&", Uri.EscapeUriString(count.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<LadderStanding>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<LadderStanding>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class MapClient : ImperaHttpClient
    {
        public MapClient() : this("") { }
    
        public MapClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<MapTemplateDescriptor>> GetAllSummaryAsync()
        {
            return GetAllSummaryAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<MapTemplateDescriptor>> GetAllSummaryAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/map");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<MapTemplateDescriptor>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<MapTemplateDescriptor>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get map template identified by name</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<MapTemplate> GetMapTemplateAsync(string name)
        {
            return GetMapTemplateAsync(name, CancellationToken.None);
        }
    
        /// <summary>Get map template identified by name</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<MapTemplate> GetMapTemplateAsync(string name, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/map/{name}");
    
            if (name == null)
                throw new ArgumentNullException("name");
            url_ = url_.Replace("{name}", Uri.EscapeUriString(name.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(MapTemplate); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<MapTemplate>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class GameClient : ImperaHttpClient
    {
        public GameClient() : this("") { }
    
        public GameClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Get a list of open games, excluding games by the current player</summary>
        /// <returns>List of games</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<GameSummary>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Get a list of open games, excluding games by the current player</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of games</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<GameSummary>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/open");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<GameSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<GameSummary>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get a list of the games for the current player</summary>
        /// <returns>List of games for the current user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<GameSummary>> GetMyAsync()
        {
            return GetMyAsync(CancellationToken.None);
        }
    
        /// <summary>Get a list of the games for the current player</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of games for the current user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<GameSummary>> GetMyAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/my");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<GameSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<GameSummary>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get list of games where it's the current player's team</summary>
        /// <returns>List of games where it's the current user's team</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<GameSummary>> GetMyTurnAsync()
        {
            return GetMyTurnAsync(CancellationToken.None);
        }
    
        /// <summary>Get list of games where it's the current player's team</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of games where it's the current user's team</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<GameSummary>> GetMyTurnAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/myturn");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<GameSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<GameSummary>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Create a new game</summary>
        /// <param name="creationOptions">Creation options</param>
        /// <returns>Summary of newly created game</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameSummary> PostAsync(GameCreationOptions creationOptions)
        {
            return PostAsync(creationOptions, CancellationToken.None);
        }
    
        /// <summary>Create a new game</summary>
        /// <param name="creationOptions">Creation options</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Summary of newly created game</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameSummary> PostAsync(GameCreationOptions creationOptions, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(creationOptions));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameSummary); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameSummary>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get detailed information about a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <returns>Information about the requested game</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Game> GetAsync(long gameId)
        {
            return GetAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Get detailed information about a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Information about the requested game</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Game> GetAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Game); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Game>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Cancel/delete the requested game, if possible.</summary>
        /// <param name="gameId">Id of the game to delete</param>
        /// <returns>Status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> DeleteAsync(long gameId)
        {
            return DeleteAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Cancel/delete the requested game, if possible.</summary>
        /// <param name="gameId">Id of the game to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Status</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> DeleteAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get messages for a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <param name="isPublic">Value indicating whether to return only public messages, default is true</param>
        /// <returns>Messages posted in the requested game</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Game> GetMessagesAsync(long gameId, bool? isPublic)
        {
            return GetMessagesAsync(gameId, isPublic, CancellationToken.None);
        }
    
        /// <summary>Get messages for a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <param name="isPublic">Value indicating whether to return only public messages, default is true</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Messages posted in the requested game</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Game> GetMessagesAsync(long gameId, bool? isPublic, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/messages");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            if (isPublic == null)
                throw new ArgumentNullException("isPublic");
            else
                url_ += string.Format("isPublic={0}&", Uri.EscapeUriString(isPublic.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Game); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Game>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Join the given game</summary>
        /// <param name="gameId">Id of game to join</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PostJoinAsync(long gameId)
        {
            return PostJoinAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Join the given game</summary>
        /// <param name="gameId">Id of game to join</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PostJoinAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/join");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Leave the given game, only possible if game hasn't started yet, and current player
        /// is not the creator.</summary>
        /// <param name="gameId">Id of game to leave</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PostLeaveAsync(long gameId)
        {
            return PostLeaveAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Leave the given game, only possible if game hasn't started yet, and current player
        /// is not the creator.</summary>
        /// <param name="gameId">Id of game to leave</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PostLeaveAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/leave");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Surrender in the given game, only possible if current player
        /// and game are still active.</summary>
        /// <param name="gameId">Id of game to surrender in</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameSummary> PostSurrenderAsync(long gameId)
        {
            return PostSurrenderAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Surrender in the given game, only possible if current player
        /// and game are still active.</summary>
        /// <param name="gameId">Id of game to surrender in</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameSummary> PostSurrenderAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/surrender");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameSummary); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameSummary>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Hides the given game for the current player</summary>
        /// <param name="gameId">Id of game to hide</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PatchHideAsync(long gameId)
        {
            return PatchHideAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Hides the given game for the current player</summary>
        /// <param name="gameId">Id of game to hide</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PatchHideAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/hide");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Hide all games which can be hidden for the current player</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PatchHideAllAsync()
        {
            return PatchHideAllAsync(CancellationToken.None);
        }
    
        /// <summary>Hide all games which can be hidden for the current player</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PatchHideAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/hide");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class MessageClient : ImperaHttpClient
    {
        public MessageClient() : this("") { }
    
        public MessageClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<Message>> GetAllAsync(MessageFolder folder)
        {
            return GetAllAsync(folder, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<Message>> GetAllAsync(MessageFolder folder, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages/folder/{folder}");
    
            if (folder == null)
                throw new ArgumentNullException("folder");
            url_ = url_.Replace("{folder}", Uri.EscapeUriString(folder.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<Message>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<Message>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Message> GetAsync(Guid messageId)
        {
            return GetAsync(messageId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Message> GetAsync(Guid messageId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages/{messageId}");
    
            if (messageId == null)
                throw new ArgumentNullException("messageId");
            url_ = url_.Replace("{messageId}", Uri.EscapeUriString(messageId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Message); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Message>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PatchMarkReadAsync(Guid messageId)
        {
            return PatchMarkReadAsync(messageId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PatchMarkReadAsync(Guid messageId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages/{messageId}");
    
            if (messageId == null)
                throw new ArgumentNullException("messageId");
            url_ = url_.Replace("{messageId}", Uri.EscapeUriString(messageId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> DeleteAsync(Guid messageId)
        {
            return DeleteAsync(messageId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> DeleteAsync(Guid messageId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages/{messageId}");
    
            if (messageId == null)
                throw new ArgumentNullException("messageId");
            url_ = url_.Replace("{messageId}", Uri.EscapeUriString(messageId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<FolderInformation> GetFolderInformationAsync()
        {
            return GetFolderInformationAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<FolderInformation> GetFolderInformationAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages/folders");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(FolderInformation); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<FolderInformation>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PostSendAsync(SendMessage message)
        {
            return PostSendAsync(message, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PostSendAsync(SendMessage message, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(message));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class NewsClient : ImperaHttpClient
    {
        public NewsClient() : this("") { }
    
        public NewsClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns the last 10 news items for all languages</summary>
        /// <returns>List of news items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<NewsItem>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Returns the last 10 news items for all languages</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of news items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<NewsItem>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/news");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<NewsItem>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<NewsItem>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class NotificationClient : ImperaHttpClient
    {
        public NotificationClient() : this("") { }
    
        public NotificationClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Get notification summary for current user</summary>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> GetSummaryAsync()
        {
            return GetSummaryAsync(CancellationToken.None);
        }
    
        /// <summary>Get notification summary for current user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> GetSummaryAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/notifications/summary");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class PlayClient : ImperaHttpClient
    {
        public PlayClient() : this("") { }
    
        public PlayClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Place units to countries.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="placeUnitsOptions">List of country/unit count pairs</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameActionResult> PostPlaceAsync(long gameId, IEnumerable<PlaceUnitsOptions> placeUnitsOptions)
        {
            return PostPlaceAsync(gameId, placeUnitsOptions, CancellationToken.None);
        }
    
        /// <summary>Place units to countries.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="placeUnitsOptions">List of country/unit count pairs</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostPlaceAsync(long gameId, IEnumerable<PlaceUnitsOptions> placeUnitsOptions, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/play/place");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(placeUnitsOptions));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Exchange cards for the current player. Which cards to exchange is automatically chosen to gain the most bonus for the player.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameActionResult> PostExchangeAsync(long gameId)
        {
            return PostExchangeAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Exchange cards for the current player. Which cards to exchange is automatically chosen to gain the most bonus for the player.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostExchangeAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/play/exchange");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Attack from one to another country.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameActionResult> PostAttackAsync(long gameId, AttackOptions options)
        {
            return PostAttackAsync(gameId, options, CancellationToken.None);
        }
    
        /// <summary>Attack from one to another country.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostAttackAsync(long gameId, AttackOptions options, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/play/attack");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(options));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Switch to moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameActionResult> PostEndAttackAsync(long gameId)
        {
            return PostEndAttackAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Switch to moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostEndAttackAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/play/endattack");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Move units between countries. Only allowed after placing. Cancels any attacks that the player had left before. Attacking is not
        /// possible anymore after moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GameActionResult> PostMoveAsync(long gameId, MoveOptions options)
        {
            return PostMoveAsync(gameId, options, CancellationToken.None);
        }
    
        /// <summary>Move units between countries. Only allowed after placing. Cancels any attacks that the player had left before. Attacking is not
        /// possible anymore after moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostMoveAsync(long gameId, MoveOptions options, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/play/move");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(JsonConvert.SerializeObject(options));
            content_.Headers.ContentType.MediaType = "application/json";
    
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>End the current turn</summary>
        /// <param name="gameId">Id of the game</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Game> PostEndTurnAsync(long gameId)
        {
            return PostEndTurnAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>End the current turn</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>GameActionResult of action</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Game> PostEndTurnAsync(long gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/play/endturn");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeUriString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Game); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Game>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class TournamentClient : ImperaHttpClient
    {
        public TournamentClient() : this("") { }
    
        public TournamentClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns tournaments</summary>
        /// <returns>List of tournaments</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<Tournament>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Returns tournaments</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of tournaments</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<Tournament>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<Tournament>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<Tournament>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get tournament identified by Id</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Tournament> GetByIdAsync(Guid tournamentId)
        {
            return GetByIdAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Get tournament identified by Id</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Tournament> GetByIdAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Tournament); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Tournament>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Join tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TournamentTeam> PostJoinAsync(Guid tournamentId)
        {
            return PostJoinAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Join tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TournamentTeam> PostJoinAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(TournamentTeam); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<TournamentTeam>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get teams for tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<TournamentTeam>> GetTeamsAsync(Guid tournamentId)
        {
            return GetTeamsAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Get teams for tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<TournamentTeam>> GetTeamsAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<TournamentTeam>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<TournamentTeam>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Create new team for a tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="name">Name of team</param>
        /// <param name="password">Optional password for team</param>
        /// <returns>Summary of newly created team</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TournamentTeamSummary> PostCreateTeamAsync(Guid tournamentId, string name, string password)
        {
            return PostCreateTeamAsync(tournamentId, name, password, CancellationToken.None);
        }
    
        /// <summary>Create new team for a tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="name">Name of team</param>
        /// <param name="password">Optional password for team</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Summary of newly created team</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TournamentTeamSummary> PostCreateTeamAsync(Guid tournamentId, string name, string password, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            if (name != null)
                url_ += string.Format("name={0}&", Uri.EscapeUriString(name.ToString()));
    
            if (password != null)
                url_ += string.Format("password={0}&", Uri.EscapeUriString(password.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(TournamentTeamSummary); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<TournamentTeamSummary>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Join existing team</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team</param>
        /// <param name="password">Optional password for team to join</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> PostJoinTeamAsync(Guid tournamentId, Guid teamId, string password)
        {
            return PostJoinTeamAsync(tournamentId, teamId, password, CancellationToken.None);
        }
    
        /// <summary>Join existing team</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team</param>
        /// <param name="password">Optional password for team to join</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> PostJoinTeamAsync(Guid tournamentId, Guid teamId, string password, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams/{teamId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            if (teamId == null)
                throw new ArgumentNullException("teamId");
            url_ = url_.Replace("{teamId}", Uri.EscapeUriString(teamId.ToString()));
    
            if (password != null)
                url_ += string.Format("password={0}&", Uri.EscapeUriString(password.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Delete a team. Only allowed if user created it</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team to delete</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> DeleteTeamAsync(Guid tournamentId, Guid teamId)
        {
            return DeleteTeamAsync(tournamentId, teamId, CancellationToken.None);
        }
    
        /// <summary>Delete a team. Only allowed if user created it</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> DeleteTeamAsync(Guid tournamentId, Guid teamId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams/{teamId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            if (teamId == null)
                throw new ArgumentNullException("teamId");
            url_ = url_.Replace("{teamId}", Uri.EscapeUriString(teamId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.DeleteAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Leave a team and tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<byte[]> LeaveTournamentAsync(Guid tournamentId)
        {
            return LeaveTournamentAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Leave a team and tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<byte[]> LeaveTournamentAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams/me");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeUriString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var content_ = new StringContent(string.Empty);
            
            var response_ = await client_.PostAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return responseData_; 
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public partial class UserClient : ImperaHttpClient
    {
        public UserClient() : this("") { }
    
        public UserClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Find users starting with the given query</summary>
        /// <param name="query">Query to search for</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<IEnumerable<UserReference>> FindUsersAsync(string query)
        {
            return FindUsersAsync(query, CancellationToken.None);
        }
    
        /// <summary>Find users starting with the given query</summary>
        /// <param name="query">Query to search for</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<IEnumerable<UserReference>> FindUsersAsync(string query, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/users/find/{query}");
    
            if (query == null)
                throw new ArgumentNullException("query");
            url_ = url_.Replace("{query}", Uri.EscapeUriString(query.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            PrepareRequest(client_, ref url_);
    
            var response_ = await client_.GetAsync(url_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(IEnumerable<UserReference>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<IEnumerable<UserReference>>(Encoding.UTF8.GetString(responseData_));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class UserInfo 
    {
    
        [JsonProperty("UserId", Required = Required.Default)]
        public string UserId { get; set; }
    
        [JsonProperty("UserName", Required = Required.Default)]
        public string UserName { get; set; }
    
        [JsonProperty("HasRegistered", Required = Required.Always)]
        public bool HasRegistered { get; set; }
    
        [JsonProperty("LoginProvider", Required = Required.Default)]
        public string LoginProvider { get; set; }
    
        [JsonProperty("Language", Required = Required.Default)]
        public string Language { get; set; }
    
        [JsonProperty("Roles", Required = Required.Default)]
        public IEnumerable<string> Roles { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static UserInfo FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserInfo>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ManageInfoViewModel 
    {
    
        [JsonProperty("LocalLoginProvider", Required = Required.Default)]
        public string LocalLoginProvider { get; set; }
    
        [JsonProperty("UserName", Required = Required.Default)]
        public string UserName { get; set; }
    
        [JsonProperty("Logins", Required = Required.Default)]
        public IEnumerable<UserLoginInfoViewModel> Logins { get; set; }
    
        [JsonProperty("ExternalLoginProviders", Required = Required.Default)]
        public IEnumerable<ExternalLoginViewModel> ExternalLoginProviders { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ManageInfoViewModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ManageInfoViewModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class UserLoginInfoViewModel 
    {
    
        [JsonProperty("LoginProvider", Required = Required.Default)]
        public string LoginProvider { get; set; }
    
        [JsonProperty("ProviderKey", Required = Required.Default)]
        public string ProviderKey { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static UserLoginInfoViewModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserLoginInfoViewModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ExternalLoginViewModel 
    {
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("Url", Required = Required.Default)]
        public string Url { get; set; }
    
        [JsonProperty("State", Required = Required.Default)]
        public string State { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ExternalLoginViewModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ExternalLoginViewModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ChangePasswordBindingModel 
    {
    
        [JsonProperty("OldPassword", Required = Required.Always)]
        [Required]
        public string OldPassword { get; set; }
    
        [JsonProperty("NewPassword", Required = Required.Always)]
        [Required]
        public string NewPassword { get; set; }
    
        [JsonProperty("ConfirmPassword", Required = Required.Default)]
        public string ConfirmPassword { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ChangePasswordBindingModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ChangePasswordBindingModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class SetPasswordBindingModel 
    {
    
        [JsonProperty("NewPassword", Required = Required.Always)]
        [Required]
        public string NewPassword { get; set; }
    
        [JsonProperty("ConfirmPassword", Required = Required.Default)]
        public string ConfirmPassword { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static SetPasswordBindingModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SetPasswordBindingModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class LanguageModel 
    {
    
        [JsonProperty("Language", Required = Required.Always)]
        [Required]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static LanguageModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LanguageModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class AddExternalLoginBindingModel 
    {
    
        [JsonProperty("ExternalAccessToken", Required = Required.Always)]
        [Required]
        public string ExternalAccessToken { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static AddExternalLoginBindingModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AddExternalLoginBindingModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class RemoveLoginBindingModel 
    {
    
        [JsonProperty("LoginProvider", Required = Required.Always)]
        [Required]
        public string LoginProvider { get; set; }
    
        [JsonProperty("ProviderKey", Required = Required.Always)]
        [Required]
        public string ProviderKey { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static RemoveLoginBindingModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<RemoveLoginBindingModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class RegisterBindingModel 
    {
    
        [JsonProperty("UserName", Required = Required.Always)]
        [Required]
        public string UserName { get; set; }
    
        [JsonProperty("Password", Required = Required.Always)]
        [Required]
        public string Password { get; set; }
    
        [JsonProperty("ConfirmPassword", Required = Required.Default)]
        public string ConfirmPassword { get; set; }
    
        [JsonProperty("Email", Required = Required.Always)]
        [Required]
        public string Email { get; set; }
    
        [JsonProperty("Language", Required = Required.Always)]
        [Required]
        public string Language { get; set; }
    
        [JsonProperty("CallbackUrl", Required = Required.Always)]
        [Required]
        public string CallbackUrl { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static RegisterBindingModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<RegisterBindingModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ResendConfirmationModel 
    {
    
        [JsonProperty("CallbackUrl", Required = Required.Always)]
        [Required]
        public string CallbackUrl { get; set; }
    
        [JsonProperty("UserName", Required = Required.Always)]
        [Required]
        public string UserName { get; set; }
    
        [JsonProperty("Password", Required = Required.Always)]
        [Required]
        public string Password { get; set; }
    
        [JsonProperty("Language", Required = Required.Always)]
        [Required]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ResendConfirmationModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ResendConfirmationModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ConfirmationModel 
    {
    
        [JsonProperty("UserId", Required = Required.Always)]
        [Required]
        public string UserId { get; set; }
    
        [JsonProperty("Code", Required = Required.Always)]
        [Required]
        public string Code { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ConfirmationModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ConfirmationModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ForgotPasswordViewModel 
    {
    
        [JsonProperty("CallbackUrl", Required = Required.Always)]
        [Required]
        public string CallbackUrl { get; set; }
    
        [JsonProperty("UserName", Required = Required.Always)]
        [Required]
        public string UserName { get; set; }
    
        [JsonProperty("Email", Required = Required.Always)]
        [Required]
        public string Email { get; set; }
    
        [JsonProperty("Language", Required = Required.Always)]
        [Required]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ForgotPasswordViewModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ForgotPasswordViewModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class ResetPasswordViewModel 
    {
    
        [JsonProperty("UserId", Required = Required.Always)]
        [Required]
        public string UserId { get; set; }
    
        [JsonProperty("Password", Required = Required.Always)]
        [Required]
        public string Password { get; set; }
    
        [JsonProperty("ConfirmPassword", Required = Required.Default)]
        public string ConfirmPassword { get; set; }
    
        [JsonProperty("Code", Required = Required.Always)]
        [Required]
        public string Code { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ResetPasswordViewModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ResetPasswordViewModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class RegisterExternalBindingModel 
    {
    
        [JsonProperty("UserName", Required = Required.Always)]
        [Required]
        public string UserName { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static RegisterExternalBindingModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<RegisterExternalBindingModel>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class HistoryTurn 
    {
    
        [JsonProperty("GameId", Required = Required.Always)]
        public long GameId { get; set; }
    
        [JsonProperty("TurnId", Required = Required.Always)]
        public long TurnId { get; set; }
    
        [JsonProperty("Actions", Required = Required.Default)]
        public IEnumerable<HistoryEntry> Actions { get; set; }
    
        [JsonProperty("Game", Required = Required.Default)]
        public Game Game { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static HistoryTurn FromJson(string data)
        {
            return JsonConvert.DeserializeObject<HistoryTurn>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class HistoryEntry 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        public long Id { get; set; }
    
        [JsonProperty("TurnNo", Required = Required.Always)]
        public long TurnNo { get; set; }
    
        [JsonProperty("DateTime", Required = Required.Always)]
        [Required]
        public DateTime DateTime { get; set; }
    
        [JsonProperty("ActorId", Required = Required.Always)]
        [Required]
        public Guid ActorId { get; set; }
    
        [JsonProperty("OtherPlayerId", Required = Required.Default)]
        public Guid? OtherPlayerId { get; set; }
    
        [JsonProperty("Action", Required = Required.Always)]
        public HistoryAction Action { get; set; }
    
        [JsonProperty("OriginIdentifier", Required = Required.Default)]
        public string OriginIdentifier { get; set; }
    
        [JsonProperty("DestinationIdentifier", Required = Required.Default)]
        public string DestinationIdentifier { get; set; }
    
        [JsonProperty("Units", Required = Required.Default)]
        public int? Units { get; set; }
    
        [JsonProperty("UnitsLost", Required = Required.Default)]
        public int? UnitsLost { get; set; }
    
        [JsonProperty("UnitsLostOther", Required = Required.Default)]
        public int? UnitsLostOther { get; set; }
    
        [JsonProperty("Result", Required = Required.Default)]
        public bool? Result { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static HistoryEntry FromJson(string data)
        {
            return JsonConvert.DeserializeObject<HistoryEntry>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum HistoryAction
    {
        None = 0,
    
        StartGame = 1,
    
        EndGame = 2,
    
        PlaceUnits = 3,
    
        Attack = 4,
    
        Move = 5,
    
        ExchangeCards = 6,
    
        PlayerLost = 7,
    
        PlayerWon = 8,
    
        PlayerTimeout = 9,
    
        OwnerChange = 10,
    
        EndTurn = 11,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Game 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        public long Id { get; set; }
    
        [JsonProperty("Type", Required = Required.Always)]
        public GameType Type { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("MapTemplate", Required = Required.Default)]
        public string MapTemplate { get; set; }
    
        [JsonProperty("Teams", Required = Required.Default)]
        public IEnumerable<Team> Teams { get; set; }
    
        [JsonProperty("State", Required = Required.Always)]
        public GameState State { get; set; }
    
        [JsonProperty("PlayState", Required = Required.Always)]
        public PlayState PlayState { get; set; }
    
        [JsonProperty("CurrentPlayer", Required = Required.Default)]
        public PlayerSummary CurrentPlayer { get; set; }
    
        [JsonProperty("Map", Required = Required.Default)]
        public Map Map { get; set; }
    
        [JsonProperty("Options", Required = Required.Default)]
        public GameOptions Options { get; set; }
    
        [JsonProperty("LastModifiedAt", Required = Required.Always)]
        [Required]
        public DateTime LastModifiedAt { get; set; }
    
        [JsonProperty("TimeoutSecondsLeft", Required = Required.Always)]
        public int TimeoutSecondsLeft { get; set; }
    
        [JsonProperty("TurnCounter", Required = Required.Always)]
        public int TurnCounter { get; set; }
    
        [JsonProperty("UnitsToPlace", Required = Required.Always)]
        public int UnitsToPlace { get; set; }
    
        [JsonProperty("AttacksInCurrentTurn", Required = Required.Always)]
        public int AttacksInCurrentTurn { get; set; }
    
        [JsonProperty("MovesInCurrentTurn", Required = Required.Always)]
        public int MovesInCurrentTurn { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Game FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Game>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum GameType
    {
        Fun = 0,
    
        Ranking = 1,
    
        Tournament = 2,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Team 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("PlayOrder", Required = Required.Always)]
        public int PlayOrder { get; set; }
    
        [JsonProperty("Players", Required = Required.Default)]
        public IEnumerable<Player> Players { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Team FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Team>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class PlayerSummary 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("UserId", Required = Required.Default)]
        public string UserId { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("State", Required = Required.Always)]
        public PlayerState State { get; set; }
    
        [JsonProperty("Outcome", Required = Required.Always)]
        public PlayerOutcome Outcome { get; set; }
    
        [JsonProperty("TeamId", Required = Required.Always)]
        [Required]
        public Guid TeamId { get; set; }
    
        [JsonProperty("PlayOrder", Required = Required.Always)]
        public int PlayOrder { get; set; }
    
        [JsonProperty("Timeouts", Required = Required.Always)]
        public int Timeouts { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static PlayerSummary FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PlayerSummary>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Player : PlayerSummary
    {
    
        [JsonProperty("Cards", Required = Required.Default)]
        public IEnumerable<BonusCard> Cards { get; set; }
    
        [JsonProperty("PlacedInitialUnits", Required = Required.Always)]
        public bool PlacedInitialUnits { get; set; }
    
        [JsonProperty("NumberOfUnits", Required = Required.Always)]
        public int NumberOfUnits { get; set; }
    
        [JsonProperty("NumberOfCountries", Required = Required.Always)]
        public int NumberOfCountries { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Player FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Player>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum BonusCard
    {
        A = 0,
    
        B = 1,
    
        C = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum PlayerState
    {
        None = 0,
    
        Active = 1,
    
        InActive = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum PlayerOutcome
    {
        None = 0,
    
        Won = 1,
    
        Defeated = 2,
    
        Surrendered = 3,
    
        Timeout = 4,
    
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum GameState
    {
        None = 0,
    
        Open = 1,
    
        Active = 2,
    
        Ended = 3,
    
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum PlayState
    {
        None = 0,
    
        PlaceUnits = 1,
    
        Attack = 2,
    
        Move = 3,
    
        Done = 4,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Map 
    {
    
        [JsonProperty("Countries", Required = Required.Default)]
        public IEnumerable<Country> Countries { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Map FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Map>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Country 
    {
    
        [JsonProperty("Identifier", Required = Required.Default)]
        public string Identifier { get; set; }
    
        [JsonProperty("PlayerId", Required = Required.Always)]
        [Required]
        public Guid PlayerId { get; set; }
    
        [JsonProperty("TeamId", Required = Required.Always)]
        [Required]
        public Guid TeamId { get; set; }
    
        [JsonProperty("Units", Required = Required.Always)]
        public int Units { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Country FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Country>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class GameOptions 
    {
    
        [JsonProperty("NumberOfPlayersPerTeam", Required = Required.Always)]
        public int NumberOfPlayersPerTeam { get; set; }
    
        [JsonProperty("NumberOfTeams", Required = Required.Always)]
        public int NumberOfTeams { get; set; }
    
        [JsonProperty("MinUnitsPerCountry", Required = Required.Always)]
        public int MinUnitsPerCountry { get; set; }
    
        [JsonProperty("NewUnitsPerTurn", Required = Required.Always)]
        public int NewUnitsPerTurn { get; set; }
    
        [JsonProperty("AttacksPerTurn", Required = Required.Always)]
        public int AttacksPerTurn { get; set; }
    
        [JsonProperty("MovesPerTurn", Required = Required.Always)]
        public int MovesPerTurn { get; set; }
    
        [JsonProperty("InitialCountryUnits", Required = Required.Always)]
        public int InitialCountryUnits { get; set; }
    
        [JsonProperty("MapDistribution", Required = Required.Always)]
        public MapDistribution MapDistribution { get; set; }
    
        [JsonProperty("TimeoutInSeconds", Required = Required.Always)]
        public int TimeoutInSeconds { get; set; }
    
        [JsonProperty("MaximumTimeoutsPerPlayer", Required = Required.Always)]
        public int MaximumTimeoutsPerPlayer { get; set; }
    
        [JsonProperty("MaximumNumberOfCards", Required = Required.Always)]
        public int MaximumNumberOfCards { get; set; }
    
        [JsonProperty("VictoryConditions", Required = Required.Always)]
        [Required]
        public IEnumerable<VictoryConditionType> VictoryConditions { get; set; }
    
        [JsonProperty("VisibilityModifier", Required = Required.Always)]
        [Required]
        public IEnumerable<VisibilityModifierType> VisibilityModifier { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static GameOptions FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GameOptions>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum MapDistribution
    {
        Default = 0,
    
        Malibu = 1,
    
        TeamCluster = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum VictoryConditionType
    {
        Survival = 0,
    
        ControlContinent = 1,
    
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum VisibilityModifierType
    {
        None = 0,
    
        Fog = 1,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class LadderSummary 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("Options", Required = Required.Default)]
        public GameOptions Options { get; set; }
    
        [JsonProperty("Standing", Required = Required.Default)]
        public LadderStanding Standing { get; set; }
    
        [JsonProperty("IsQueued", Required = Required.Always)]
        public bool IsQueued { get; set; }
    
        [JsonProperty("QueueCount", Required = Required.Always)]
        public int QueueCount { get; set; }
    
        [JsonProperty("MapTemplates", Required = Required.Always)]
        [Required]
        public IEnumerable<string> MapTemplates { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static LadderSummary FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LadderSummary>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class LadderStanding 
    {
    
        [JsonProperty("UserId", Required = Required.Default)]
        public string UserId { get; set; }
    
        [JsonProperty("UserName", Required = Required.Default)]
        public string UserName { get; set; }
    
        [JsonProperty("Position", Required = Required.Always)]
        public int Position { get; set; }
    
        [JsonProperty("GamesPlayed", Required = Required.Always)]
        public int GamesPlayed { get; set; }
    
        [JsonProperty("GamesWon", Required = Required.Always)]
        public int GamesWon { get; set; }
    
        [JsonProperty("GamesLost", Required = Required.Always)]
        public int GamesLost { get; set; }
    
        [JsonProperty("Rating", Required = Required.Always)]
        public double Rating { get; set; }
    
        [JsonProperty("LastGame", Required = Required.Always)]
        [Required]
        public DateTime LastGame { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static LadderStanding FromJson(string data)
        {
            return JsonConvert.DeserializeObject<LadderStanding>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Ladder : LadderSummary
    {
    
        [JsonProperty("Standings", Required = Required.Default)]
        public IEnumerable<LadderStanding> Standings { get; set; }
    
        [JsonProperty("IsActive", Required = Required.Always)]
        public bool IsActive { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Ladder FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Ladder>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class MapTemplateDescriptor 
    {
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static MapTemplateDescriptor FromJson(string data)
        {
            return JsonConvert.DeserializeObject<MapTemplateDescriptor>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class MapTemplate 
    {
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("Image", Required = Required.Default)]
        public string Image { get; set; }
    
        [JsonProperty("Countries", Required = Required.Default)]
        public IEnumerable<CountryTemplate> Countries { get; set; }
    
        [JsonProperty("Connections", Required = Required.Default)]
        public IEnumerable<Connection> Connections { get; set; }
    
        [JsonProperty("Continents", Required = Required.Default)]
        public IEnumerable<Continent> Continents { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static MapTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<MapTemplate>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class CountryTemplate 
    {
    
        [JsonProperty("Identifier", Required = Required.Default)]
        public string Identifier { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("X", Required = Required.Always)]
        public int X { get; set; }
    
        [JsonProperty("Y", Required = Required.Always)]
        public int Y { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static CountryTemplate FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CountryTemplate>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Connection 
    {
    
        [JsonProperty("Origin", Required = Required.Default)]
        public string Origin { get; set; }
    
        [JsonProperty("Destination", Required = Required.Default)]
        public string Destination { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Connection FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Connection>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Continent 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        public long Id { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("Bonus", Required = Required.Always)]
        public int Bonus { get; set; }
    
        [JsonProperty("Countries", Required = Required.Default)]
        public IEnumerable<string> Countries { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Continent FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Continent>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class GameSummary 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        public long Id { get; set; }
    
        [JsonProperty("Type", Required = Required.Always)]
        public GameType Type { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("LadderId", Required = Required.Default)]
        public Guid? LadderId { get; set; }
    
        [JsonProperty("LadderName", Required = Required.Default)]
        public string LadderName { get; set; }
    
        [JsonProperty("Options", Required = Required.Default)]
        public GameOptions Options { get; set; }
    
        [JsonProperty("CreatedByUserId", Required = Required.Default)]
        public string CreatedByUserId { get; set; }
    
        [JsonProperty("CreatedByName", Required = Required.Default)]
        public string CreatedByName { get; set; }
    
        [JsonProperty("StartedAt", Required = Required.Default)]
        public DateTime? StartedAt { get; set; }
    
        [JsonProperty("LastActionAt", Required = Required.Always)]
        [Required]
        public DateTime LastActionAt { get; set; }
    
        [JsonProperty("TimeoutSecondsLeft", Required = Required.Always)]
        public int TimeoutSecondsLeft { get; set; }
    
        [JsonProperty("MapTemplate", Required = Required.Default)]
        public string MapTemplate { get; set; }
    
        [JsonProperty("State", Required = Required.Always)]
        public GameState State { get; set; }
    
        [JsonProperty("CurrentPlayer", Required = Required.Default)]
        public PlayerSummary CurrentPlayer { get; set; }
    
        [JsonProperty("Teams", Required = Required.Default)]
        public IEnumerable<TeamSummary> Teams { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static GameSummary FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GameSummary>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class TeamSummary 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("PlayOrder", Required = Required.Always)]
        public int PlayOrder { get; set; }
    
        [JsonProperty("Players", Required = Required.Default)]
        public IEnumerable<PlayerSummary> Players { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TeamSummary FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TeamSummary>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class GameCreationOptions : GameOptions
    {
    
        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name { get; set; }
    
        [JsonProperty("AddBot", Required = Required.Always)]
        public bool AddBot { get; set; }
    
        [JsonProperty("MapTemplate", Required = Required.Always)]
        [Required]
        public string MapTemplate { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static GameCreationOptions FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GameCreationOptions>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum MessageFolder
    {
        None = 0,
    
        Inbox = 1,
    
        Sent = 2,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class SendMessage 
    {
    
        [JsonProperty("To", Required = Required.Always)]
        [Required]
        public UserReference To { get; set; }
    
        [JsonProperty("Subject", Required = Required.Default)]
        public string Subject { get; set; }
    
        [JsonProperty("Text", Required = Required.Default)]
        public string Text { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static SendMessage FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SendMessage>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Message : SendMessage
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("From", Required = Required.Default)]
        public UserReference From { get; set; }
    
        [JsonProperty("Folder", Required = Required.Always)]
        public MessageFolder Folder { get; set; }
    
        [JsonProperty("SentAt", Required = Required.Always)]
        [Required]
        public DateTime SentAt { get; set; }
    
        [JsonProperty("IsRead", Required = Required.Always)]
        public bool IsRead { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Message FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Message>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class UserReference 
    {
    
        [JsonProperty("Id", Required = Required.Default)]
        public string Id { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static UserReference FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserReference>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class FolderInformation 
    {
    
        [JsonProperty("Folder", Required = Required.Always)]
        public MessageFolder Folder { get; set; }
    
        [JsonProperty("Count", Required = Required.Always)]
        public int Count { get; set; }
    
        [JsonProperty("UnreadCount", Required = Required.Always)]
        public int UnreadCount { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static FolderInformation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FolderInformation>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class NewsItem 
    {
    
        [JsonProperty("DateTime", Required = Required.Always)]
        [Required]
        public DateTime DateTime { get; set; }
    
        [JsonProperty("PostedBy", Required = Required.Default)]
        public string PostedBy { get; set; }
    
        [JsonProperty("Content", Required = Required.Default)]
        public IEnumerable<NewsContent> Content { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static NewsItem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewsItem>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class NewsContent 
    {
    
        [JsonProperty("Language", Required = Required.Default)]
        public string Language { get; set; }
    
        [JsonProperty("Title", Required = Required.Default)]
        public string Title { get; set; }
    
        [JsonProperty("Text", Required = Required.Default)]
        public string Text { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static NewsContent FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewsContent>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class PlaceUnitsOptions 
    {
    
        [JsonProperty("CountryIdentifier", Required = Required.Always)]
        [Required]
        public string CountryIdentifier { get; set; }
    
        [JsonProperty("NumberOfUnits", Required = Required.Always)]
        public int NumberOfUnits { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static PlaceUnitsOptions FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PlaceUnitsOptions>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class GameActionResult 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        public long Id { get; set; }
    
        [JsonProperty("Teams", Required = Required.Default)]
        public IEnumerable<Team> Teams { get; set; }
    
        [JsonProperty("State", Required = Required.Always)]
        public GameState State { get; set; }
    
        [JsonProperty("PlayState", Required = Required.Always)]
        public PlayState PlayState { get; set; }
    
        [JsonProperty("CountryUpdates", Required = Required.Default)]
        public IEnumerable<Country> CountryUpdates { get; set; }
    
        [JsonProperty("ActionResult", Required = Required.Always)]
        public ActionResult ActionResult { get; set; }
    
        [JsonProperty("AttacksInCurrentTurn", Required = Required.Always)]
        public int AttacksInCurrentTurn { get; set; }
    
        [JsonProperty("MovesInCurrentTurn", Required = Required.Always)]
        public int MovesInCurrentTurn { get; set; }
    
        [JsonProperty("Cards", Required = Required.Default)]
        public IEnumerable<BonusCard> Cards { get; set; }
    
        [JsonProperty("CurrentPlayer", Required = Required.Default)]
        public Player CurrentPlayer { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static GameActionResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GameActionResult>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum ActionResult
    {
        None = 0,
    
        Successful = 1,
    
        NotSuccessful = 2,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class AttackOptions 
    {
    
        [JsonProperty("OriginCountryIdentifier", Required = Required.Always)]
        [Required]
        public string OriginCountryIdentifier { get; set; }
    
        [JsonProperty("DestinationCountryIdentifier", Required = Required.Always)]
        [Required]
        public string DestinationCountryIdentifier { get; set; }
    
        [JsonProperty("NumberOfUnits", Required = Required.Always)]
        public int NumberOfUnits { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static AttackOptions FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AttackOptions>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class MoveOptions 
    {
    
        [JsonProperty("OriginCountryIdentifier", Required = Required.Always)]
        [Required]
        public string OriginCountryIdentifier { get; set; }
    
        [JsonProperty("DestinationCountryIdentifier", Required = Required.Always)]
        [Required]
        public string DestinationCountryIdentifier { get; set; }
    
        [JsonProperty("NumberOfUnits", Required = Required.Always)]
        public int NumberOfUnits { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static MoveOptions FromJson(string data)
        {
            return JsonConvert.DeserializeObject<MoveOptions>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class TournamentSummary 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("Name", Required = Required.Always)]
        [Required]
        public string Name { get; set; }
    
        [JsonProperty("State", Required = Required.Always)]
        public TournamentState State { get; set; }
    
        [JsonProperty("Options", Required = Required.Default)]
        public GameOptions Options { get; set; }
    
        [JsonProperty("NumberOfTeams", Required = Required.Always)]
        public int NumberOfTeams { get; set; }
    
        [JsonProperty("NumberOfGroupGames", Required = Required.Always)]
        public int NumberOfGroupGames { get; set; }
    
        [JsonProperty("NumberOfKnockoutGames", Required = Required.Always)]
        public int NumberOfKnockoutGames { get; set; }
    
        [JsonProperty("NumberOfFinalGames", Required = Required.Always)]
        public int NumberOfFinalGames { get; set; }
    
        [JsonProperty("StartOfRegistration", Required = Required.Always)]
        [Required]
        public DateTime StartOfRegistration { get; set; }
    
        [JsonProperty("StartOfTournament", Required = Required.Always)]
        [Required]
        public DateTime StartOfTournament { get; set; }
    
        [JsonProperty("EndOfTournament", Required = Required.Always)]
        [Required]
        public DateTime EndOfTournament { get; set; }
    
        [JsonProperty("Completion", Required = Required.Always)]
        public int Completion { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TournamentSummary FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TournamentSummary>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class Tournament : TournamentSummary
    {
    
        [JsonProperty("Teams", Required = Required.Default)]
        public IEnumerable<TournamentTeam> Teams { get; set; }
    
        [JsonProperty("Groups", Required = Required.Default)]
        public IEnumerable<TournamentGroup> Groups { get; set; }
    
        [JsonProperty("Pairings", Required = Required.Default)]
        public IEnumerable<TournamentPairing> Pairings { get; set; }
    
        [JsonProperty("MapTemplates", Required = Required.Default)]
        public IEnumerable<string> MapTemplates { get; set; }
    
        [JsonProperty("Winner", Required = Required.Default)]
        public TournamentTeam Winner { get; set; }
    
        [JsonProperty("Phase", Required = Required.Always)]
        public int Phase { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static Tournament FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Tournament>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class TournamentTeamSummary 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("Name", Required = Required.Default)]
        public string Name { get; set; }
    
        [JsonProperty("GroupOrder", Required = Required.Always)]
        public int GroupOrder { get; set; }
    
        [JsonProperty("State", Required = Required.Always)]
        public TournamentTeamState State { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TournamentTeamSummary FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TournamentTeamSummary>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class TournamentTeam : TournamentTeamSummary
    {
    
        [JsonProperty("Participants", Required = Required.Default)]
        public IEnumerable<UserReference> Participants { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TournamentTeam FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TournamentTeam>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum TournamentTeamState
    {
        Open = 0,
    
        Active = 1,
    
        InActive = 2,
    
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class TournamentGroup 
    {
    
        [JsonProperty("Id", Required = Required.Always)]
        [Required]
        public Guid Id { get; set; }
    
        [JsonProperty("Teams", Required = Required.Default)]
        public IEnumerable<TournamentTeamSummary> Teams { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TournamentGroup FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TournamentGroup>(data);
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public partial class TournamentPairing 
    {
    
        [JsonProperty("TeamA", Required = Required.Default)]
        public TournamentTeamSummary TeamA { get; set; }
    
        [JsonProperty("TeamB", Required = Required.Default)]
        public TournamentTeamSummary TeamB { get; set; }
    
        [JsonProperty("TeamAWon", Required = Required.Always)]
        public int TeamAWon { get; set; }
    
        [JsonProperty("TeamBWon", Required = Required.Always)]
        public int TeamBWon { get; set; }
    
        [JsonProperty("NumberOfGames", Required = Required.Always)]
        public int NumberOfGames { get; set; }
    
        [JsonProperty("Phase", Required = Required.Always)]
        public int Phase { get; set; }
    
        [JsonProperty("Order", Required = Required.Always)]
        public int Order { get; set; }
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TournamentPairing FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TournamentPairing>(data);
        }
    }
    
    [GeneratedCode("NJsonSchema", "3.2.6060.41150")]
    public enum TournamentState
    {
        Open = 0,
    
        Groups = 1,
    
        Knockout = 2,
    
        Closed = 3,
    
    }

    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "4.2.6060.41613")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}