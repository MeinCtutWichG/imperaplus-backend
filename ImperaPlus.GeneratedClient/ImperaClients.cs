//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.15.6138.26180 (NJsonSchema v5.5.6138.25231) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using ImperaPlus.DTO;
using ImperaPlus.DTO.Account;
using ImperaPlus.DTO.Games;
using ImperaPlus.DTO.Games.Play;
using ImperaPlus.DTO.Games.History;
using ImperaPlus.DTO.Games.Chat;
using ImperaPlus.DTO.Games.Map;
using ImperaPlus.DTO.Ladder;
using ImperaPlus.DTO.Messages;
using ImperaPlus.DTO.News;
using ImperaPlus.DTO.Notifications;
using ImperaPlus.DTO.Tournaments;
using ImperaPlus.DTO.Users;

namespace ImperaPlus.GeneratedClient
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class AccountClient : ImperaHttpClient
    {
        public AccountClient() : this("") { }
    
        public AccountClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<LoginResponseModel> ExchangeAsync(string grant_type, string username, string password)
        {
            return ExchangeAsync(grant_type, username, password, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<LoginResponseModel> ExchangeAsync(string grant_type, string username, string password, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/token");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);

            var content_ = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("grant_type", "password"),
                new KeyValuePair<string, string>("username", username),
                new KeyValuePair<string, string>("password", password)
            });

            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(LoginResponseModel); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<LoginResponseModel>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Checks if a username is available</summary>
        /// <param name="userName">Username to check</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task GetUserNameAvailableAsync(string userName)
        {
            return GetUserNameAvailableAsync(userName, CancellationToken.None);
        }
    
        /// <summary>Checks if a username is available</summary>
        /// <param name="userName">Username to check</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task GetUserNameAvailableAsync(string userName, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/UserNameAvailable");
    
            if (userName != null)
                url_ += string.Format("userName={0}&", Uri.EscapeDataString(userName.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get user information</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<UserInfo> GetUserInfoAsync()
        {
            return GetUserInfoAsync(CancellationToken.None);
        }
    
        /// <summary>Get user information</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<UserInfo> GetUserInfoAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/UserInfo");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(UserInfo); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<UserInfo>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get user information for an external user (i.e., just logged in using an external provider)</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<UserInfo> GetExternalUserInfoAsync()
        {
            return GetExternalUserInfoAsync(CancellationToken.None);
        }
    
        /// <summary>Get user information for an external user (i.e., just logged in using an external provider)</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<UserInfo> GetExternalUserInfoAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/ExternalUserInfo");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(UserInfo); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<UserInfo>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task LogoutAsync()
        {
            return LogoutAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task LogoutAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/Logout");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<ManageInfoViewModel> GetManageInfoAsync(string returnUrl, bool? generateState)
        {
            return GetManageInfoAsync(returnUrl, generateState, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<ManageInfoViewModel> GetManageInfoAsync(string returnUrl, bool? generateState, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ManageInfo");
    
            if (returnUrl != null)
                url_ += string.Format("returnUrl={0}&", Uri.EscapeDataString(returnUrl.ToString()));
    
            if (generateState != null)
                url_ += string.Format("generateState={0}&", Uri.EscapeDataString(generateState.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ManageInfoViewModel); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ManageInfoViewModel>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task ChangePasswordAsync(ChangePasswordBindingModel model)
        {
            return ChangePasswordAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task ChangePasswordAsync(ChangePasswordBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/ChangePassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task SetPasswordAsync(SetPasswordBindingModel model)
        {
            return SetPasswordAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task SetPasswordAsync(SetPasswordBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/SetPassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task RemoveLoginAsync(RemoveLoginBindingModel model)
        {
            return RemoveLoginAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task RemoveLoginAsync(RemoveLoginBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/RemoveLogin");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<ExternalLoginViewModel>> GetExternalLoginsAsync(string returnUrl, bool? generateState)
        {
            return GetExternalLoginsAsync(returnUrl, generateState, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<ExternalLoginViewModel>> GetExternalLoginsAsync(string returnUrl, bool? generateState, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Account/ExternalLogins");
    
            if (returnUrl != null)
                url_ += string.Format("returnUrl={0}&", Uri.EscapeDataString(returnUrl.ToString()));
    
            if (generateState != null)
                url_ += string.Format("generateState={0}&", Uri.EscapeDataString(generateState.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<ExternalLoginViewModel>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<ExternalLoginViewModel>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task RegisterAsync(RegisterBindingModel model)
        {
            return RegisterAsync(model, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task RegisterAsync(RegisterBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/Register");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Resend the email confirmation account to the given user account</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task ResendConfirmationCodeAsync(ResendConfirmationModel model)
        {
            return ResendConfirmationCodeAsync(model, CancellationToken.None);
        }
    
        /// <summary>Resend the email confirmation account to the given user account</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task ResendConfirmationCodeAsync(ResendConfirmationModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/ResendConfirmation");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Confirm user account using code provided in mail</summary>
        /// <param name="model">Model containing id and code</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task ConfirmEmailAsync(ConfirmationModel model)
        {
            return ConfirmEmailAsync(model, CancellationToken.None);
        }
    
        /// <summary>Confirm user account using code provided in mail</summary>
        /// <param name="model">Model containing id and code</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task ConfirmEmailAsync(ConfirmationModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/ConfirmEmail");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Request password reset link</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task ForgotPasswordAsync(ForgotPasswordViewModel model)
        {
            return ForgotPasswordAsync(model, CancellationToken.None);
        }
    
        /// <summary>Request password reset link</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task ForgotPasswordAsync(ForgotPasswordViewModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/ForgotPassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Reset password confirmation</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task ResetPasswordAsync(ResetPasswordViewModel model)
        {
            return ResetPasswordAsync(model, CancellationToken.None);
        }
    
        /// <summary>Reset password confirmation</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task ResetPasswordAsync(ResetPasswordViewModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/ResetPassword");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Create user accout for an external login</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task RegisterExternalAsync(RegisterExternalBindingModel model)
        {
            return RegisterExternalAsync(model, CancellationToken.None);
        }
    
        /// <summary>Create user accout for an external login</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task RegisterExternalAsync(RegisterExternalBindingModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Account/RegisterExternal");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class GameClient : ImperaHttpClient
    {
        public GameClient() : this("") { }
    
        public GameClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Get a list of open games, excluding games by the current player</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<GameSummary>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Get a list of open games, excluding games by the current player</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<GameSummary>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/open");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<GameSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<GameSummary>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get a list of the games for the current player</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<GameSummary>> GetMyAsync()
        {
            return GetMyAsync(CancellationToken.None);
        }
    
        /// <summary>Get a list of the games for the current player</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<GameSummary>> GetMyAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/my");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<GameSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<GameSummary>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get list of games where it's the current player's team</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<GameSummary>> GetMyTurnAsync()
        {
            return GetMyTurnAsync(CancellationToken.None);
        }
    
        /// <summary>Get list of games where it's the current player's team</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<GameSummary>> GetMyTurnAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/myturn");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<GameSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<GameSummary>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Create a new game</summary>
        /// <param name="creationOptions">Creation options</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameSummary> PostAsync(GameCreationOptions creationOptions)
        {
            return PostAsync(creationOptions, CancellationToken.None);
        }
    
        /// <summary>Create a new game</summary>
        /// <param name="creationOptions">Creation options</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameSummary> PostAsync(GameCreationOptions creationOptions, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(creationOptions));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameSummary); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameSummary>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get detailed information about a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<Game> GetAsync(int gameId)
        {
            return GetAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Get detailed information about a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<Game> GetAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Game); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Game>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Cancel/delete the requested game, if possible.</summary>
        /// <param name="gameId">Id of the game to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task DeleteAsync(int gameId)
        {
            return DeleteAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Cancel/delete the requested game, if possible.</summary>
        /// <param name="gameId">Id of the game to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task DeleteAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get messages for a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <param name="isPublic">Value indicating whether to return only public messages, default is true</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<Game> GetMessagesAsync(int gameId, bool? isPublic)
        {
            return GetMessagesAsync(gameId, isPublic, CancellationToken.None);
        }
    
        /// <summary>Get messages for a single game</summary>
        /// <param name="gameId">Id of the requested game</param>
        /// <param name="isPublic">Value indicating whether to return only public messages, default is true</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<Game> GetMessagesAsync(int gameId, bool? isPublic, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/games/{gameId}/messages");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            if (isPublic != null)
                url_ += string.Format("isPublic={0}&", Uri.EscapeDataString(isPublic.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Game); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Game>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Join the given game</summary>
        /// <param name="gameId">Id of game to join</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PostJoinAsync(int gameId)
        {
            return PostJoinAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Join the given game</summary>
        /// <param name="gameId">Id of game to join</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PostJoinAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/join");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Leave the given game, only possible if game hasn't started yet, and current player
        /// is not the creator.</summary>
        /// <param name="gameId">Id of game to leave</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PostLeaveAsync(int gameId)
        {
            return PostLeaveAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Leave the given game, only possible if game hasn't started yet, and current player
        /// is not the creator.</summary>
        /// <param name="gameId">Id of game to leave</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PostLeaveAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/leave");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Surrender in the given game, only possible if current player
        /// and game are still active.</summary>
        /// <param name="gameId">Id of game to surrender in</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameSummary> PostSurrenderAsync(int gameId)
        {
            return PostSurrenderAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Surrender in the given game, only possible if current player
        /// and game are still active.</summary>
        /// <param name="gameId">Id of game to surrender in</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameSummary> PostSurrenderAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/surrender");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameSummary); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameSummary>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Hides the given game for the current player</summary>
        /// <param name="gameId">Id of game to hide</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PatchHideAsync(int gameId)
        {
            return PatchHideAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Hides the given game for the current player</summary>
        /// <param name="gameId">Id of game to hide</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PatchHideAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/hide");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Hide all games which can be hidden for the current player</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PatchHideAllAsync()
        {
            return PatchHideAllAsync(CancellationToken.None);
        }
    
        /// <summary>Hide all games which can be hidden for the current player</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PatchHideAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/hide");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class HistoryClient : ImperaHttpClient
    {
        public HistoryClient() : this("") { }
    
        public HistoryClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Gets the specified turn including the actions and current state of the map</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<HistoryTurn> GetTurnAsync(int gameId, int turnId)
        {
            return GetTurnAsync(gameId, turnId, CancellationToken.None);
        }
    
        /// <summary>Gets the specified turn including the actions and current state of the map</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<HistoryTurn> GetTurnAsync(int gameId, int turnId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/history/{turnId}");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            if (turnId == null)
                throw new ArgumentNullException("turnId");
            url_ = url_.Replace("{turnId}", Uri.EscapeDataString(turnId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(HistoryTurn); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<HistoryTurn>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class LadderClient : ImperaHttpClient
    {
        public LadderClient() : this("") { }
    
        public LadderClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns active ladders</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<LadderSummary>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Returns active ladders</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<LadderSummary>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/ladder");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<LadderSummary>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<LadderSummary>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Gets ladder identified by given id</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<Ladder> GetAsync(Guid ladderId)
        {
            return GetAsync(ladderId, CancellationToken.None);
        }
    
        /// <summary>Gets ladder identified by given id</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<Ladder> GetAsync(Guid ladderId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/ladder/{ladderId}");
    
            if (ladderId == null)
                throw new ArgumentNullException("ladderId");
            url_ = url_.Replace("{ladderId}", Uri.EscapeDataString(ladderId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Ladder); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Ladder>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Queue up for a new game in the given ladder</summary>
        /// <param name="ladderId">Ladder id</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PostJoinAsync(Guid ladderId)
        {
            return PostJoinAsync(ladderId, CancellationToken.None);
        }
    
        /// <summary>Queue up for a new game in the given ladder</summary>
        /// <param name="ladderId">Ladder id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PostJoinAsync(Guid ladderId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/ladder/{ladderId}/queue");
    
            if (ladderId == null)
                throw new ArgumentNullException("ladderId");
            url_ = url_.Replace("{ladderId}", Uri.EscapeDataString(ladderId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Gets ladder standings</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <param name="start">Items to skip before returning</param>
        /// <param name="count">Count of standings to return</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<LadderStanding>> GetStandingsAsync(Guid ladderId, int? start, int? count)
        {
            return GetStandingsAsync(ladderId, start, count, CancellationToken.None);
        }
    
        /// <summary>Gets ladder standings</summary>
        /// <param name="ladderId">Id of ladder</param>
        /// <param name="start">Items to skip before returning</param>
        /// <param name="count">Count of standings to return</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<LadderStanding>> GetStandingsAsync(Guid ladderId, int? start, int? count, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/ladder/{ladderId}/standings");
    
            if (ladderId == null)
                throw new ArgumentNullException("ladderId");
            url_ = url_.Replace("{ladderId}", Uri.EscapeDataString(ladderId.ToString()));
    
            if (start != null)
                url_ += string.Format("start={0}&", Uri.EscapeDataString(start.Value.ToString()));
    
            if (count != null)
                url_ += string.Format("count={0}&", Uri.EscapeDataString(count.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<LadderStanding>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<LadderStanding>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class MapClient : ImperaHttpClient
    {
        public MapClient() : this("") { }
    
        public MapClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<MapTemplateDescriptor>> GetAllSummaryAsync()
        {
            return GetAllSummaryAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<MapTemplateDescriptor>> GetAllSummaryAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/map");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<MapTemplateDescriptor>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<MapTemplateDescriptor>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get map template identified by name</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<MapTemplate> GetMapTemplateAsync(string name)
        {
            return GetMapTemplateAsync(name, CancellationToken.None);
        }
    
        /// <summary>Get map template identified by name</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<MapTemplate> GetMapTemplateAsync(string name, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/map/{name}");
    
            if (name == null)
                throw new ArgumentNullException("name");
            url_ = url_.Replace("{name}", Uri.EscapeDataString(name.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(MapTemplate); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<MapTemplate>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class MessageClient : ImperaHttpClient
    {
        public MessageClient() : this("") { }
    
        public MessageClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<Message>> GetAllAsync(MessageFolder? messageFolder, string folder)
        {
            return GetAllAsync(messageFolder, folder, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<Message>> GetAllAsync(MessageFolder? messageFolder, string folder, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/messages/folder/{folder}");
    
            if (folder == null)
                throw new ArgumentNullException("folder");
            url_ = url_.Replace("{folder}", Uri.EscapeDataString(folder.ToString()));
    
            if (messageFolder != null)
                url_ += string.Format("messageFolder={0}&", Uri.EscapeDataString(messageFolder.Value.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<Message>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<Message>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<Message> GetAsync(Guid messageId)
        {
            return GetAsync(messageId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<Message> GetAsync(Guid messageId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/messages/{messageId}");
    
            if (messageId == null)
                throw new ArgumentNullException("messageId");
            url_ = url_.Replace("{messageId}", Uri.EscapeDataString(messageId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Message); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Message>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task DeleteAsync(Guid messageId)
        {
            return DeleteAsync(messageId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task DeleteAsync(Guid messageId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/messages/{messageId}");
    
            if (messageId == null)
                throw new ArgumentNullException("messageId");
            url_ = url_.Replace("{messageId}", Uri.EscapeDataString(messageId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PatchMarkReadAsync(Guid messageId)
        {
            return PatchMarkReadAsync(messageId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PatchMarkReadAsync(Guid messageId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/messages/{messageId}");
    
            if (messageId == null)
                throw new ArgumentNullException("messageId");
            url_ = url_.Replace("{messageId}", Uri.EscapeDataString(messageId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<FolderInformation> GetFolderInformationAsync()
        {
            return GetFolderInformationAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<FolderInformation> GetFolderInformationAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/messages/folders");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(FolderInformation); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<FolderInformation>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PostSendAsync(SendMessage message)
        {
            return PostSendAsync(message, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PostSendAsync(SendMessage message, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/messages");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(message));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class NewsClient : ImperaHttpClient
    {
        public NewsClient() : this("") { }
    
        public NewsClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns the last 10 news items for all languages</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<NewsItem>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Returns the last 10 news items for all languages</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<NewsItem>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/news");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<NewsItem>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<NewsItem>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class NotificationClient : ImperaHttpClient
    {
        public NotificationClient() : this("") { }
    
        public NotificationClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Get notification summary for current user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task GetSummaryAsync()
        {
            return GetSummaryAsync(CancellationToken.None);
        }
    
        /// <summary>Get notification summary for current user</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task GetSummaryAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/notifications/summary");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class PlayClient : ImperaHttpClient
    {
        public PlayClient() : this("") { }
    
        public PlayClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Place units to countries.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="placeUnitsOptions">List of country/unit count pairs</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameActionResult> PostPlaceAsync(int gameId, IEnumerable<PlaceUnitsOptions> placeUnitsOptions)
        {
            return PostPlaceAsync(gameId, placeUnitsOptions, CancellationToken.None);
        }
    
        /// <summary>Place units to countries.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="placeUnitsOptions">List of country/unit count pairs</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostPlaceAsync(int gameId, IEnumerable<PlaceUnitsOptions> placeUnitsOptions, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/play/place");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(placeUnitsOptions));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Exchange cards for the current player. Which cards to exchange is automatically chosen to gain the most bonus for the player.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameActionResult> PostExchangeAsync(int gameId)
        {
            return PostExchangeAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Exchange cards for the current player. Which cards to exchange is automatically chosen to gain the most bonus for the player.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostExchangeAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/play/exchange");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Attack from one to another country.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameActionResult> PostAttackAsync(int gameId, AttackOptions options)
        {
            return PostAttackAsync(gameId, options, CancellationToken.None);
        }
    
        /// <summary>Attack from one to another country.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostAttackAsync(int gameId, AttackOptions options, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/play/attack");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(options));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Switch to moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameActionResult> PostEndAttackAsync(int gameId)
        {
            return PostEndAttackAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>Switch to moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostEndAttackAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/play/endattack");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Move units between countries. Only allowed after placing. Cancels any attacks that the player had left before. Attacking is not
        /// possible anymore after moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<GameActionResult> PostMoveAsync(int gameId, MoveOptions options)
        {
            return PostMoveAsync(gameId, options, CancellationToken.None);
        }
    
        /// <summary>Move units between countries. Only allowed after placing. Cancels any attacks that the player had left before. Attacking is not
        /// possible anymore after moving.</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="options">Options for the command</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<GameActionResult> PostMoveAsync(int gameId, MoveOptions options, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/play/move");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(options));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(GameActionResult); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GameActionResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>End the current turn</summary>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<Game> PostEndTurnAsync(int gameId)
        {
            return PostEndTurnAsync(gameId, CancellationToken.None);
        }
    
        /// <summary>End the current turn</summary>
        /// <param name="gameId">Id of the game</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<Game> PostEndTurnAsync(int gameId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/games/{gameId}/play/endturn");
    
            if (gameId == null)
                throw new ArgumentNullException("gameId");
            url_ = url_.Replace("{gameId}", Uri.EscapeDataString(gameId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Game); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Game>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class TournamentClient : ImperaHttpClient
    {
        public TournamentClient() : this("") { }
    
        public TournamentClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Returns tournaments</summary>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<Tournament>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Returns tournaments</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<Tournament>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/tournaments");
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<Tournament>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<Tournament>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get tournament identified by Id</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<Tournament> GetByIdAsync(Guid tournamentId)
        {
            return GetByIdAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Get tournament identified by Id</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<Tournament> GetByIdAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/tournaments/{tournamentId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Tournament); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Tournament>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Join tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<TournamentTeam> PostJoinAsync(Guid tournamentId)
        {
            return PostJoinAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Join tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<TournamentTeam> PostJoinAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/tournaments/{tournamentId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(TournamentTeam); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<TournamentTeam>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get teams for tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<TournamentTeam>> GetTeamsAsync(Guid tournamentId)
        {
            return GetTeamsAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Get teams for tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<TournamentTeam>> GetTeamsAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/tournaments/{tournamentId}/teams");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<TournamentTeam>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<TournamentTeam>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Create new team for a tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="name">Name of team</param>
        /// <param name="password">Optional password for team</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<TournamentTeamSummary> PostCreateTeamAsync(Guid tournamentId, string name, string password)
        {
            return PostCreateTeamAsync(tournamentId, name, password, CancellationToken.None);
        }
    
        /// <summary>Create new team for a tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="name">Name of team</param>
        /// <param name="password">Optional password for team</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<TournamentTeamSummary> PostCreateTeamAsync(Guid tournamentId, string name, string password, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            if (name != null)
                url_ += string.Format("name={0}&", Uri.EscapeDataString(name.ToString()));
    
            if (password != null)
                url_ += string.Format("password={0}&", Uri.EscapeDataString(password.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(TournamentTeamSummary); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<TournamentTeamSummary>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Join existing team</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team</param>
        /// <param name="password">Optional password for team to join</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task PostJoinTeamAsync(Guid tournamentId, Guid teamId, string password)
        {
            return PostJoinTeamAsync(tournamentId, teamId, password, CancellationToken.None);
        }
    
        /// <summary>Join existing team</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team</param>
        /// <param name="password">Optional password for team to join</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task PostJoinTeamAsync(Guid tournamentId, Guid teamId, string password, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/tournaments/{tournamentId}/teams/{teamId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            if (teamId == null)
                throw new ArgumentNullException("teamId");
            url_ = url_.Replace("{teamId}", Uri.EscapeDataString(teamId.ToString()));
    
            if (password != null)
                url_ += string.Format("password={0}&", Uri.EscapeDataString(password.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Delete a team. Only allowed if user created it</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task DeleteTeamAsync(Guid tournamentId, Guid teamId)
        {
            return DeleteTeamAsync(tournamentId, teamId, CancellationToken.None);
        }
    
        /// <summary>Delete a team. Only allowed if user created it</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="teamId">Id of team to delete</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task DeleteTeamAsync(Guid tournamentId, Guid teamId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/tournaments/{tournamentId}/teams/{teamId}");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            if (teamId == null)
                throw new ArgumentNullException("teamId");
            url_ = url_.Replace("{teamId}", Uri.EscapeDataString(teamId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Leave a team and tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task LeaveTournamentAsync(Guid tournamentId)
        {
            return LeaveTournamentAsync(tournamentId, CancellationToken.None);
        }
    
        /// <summary>Leave a team and tournament</summary>
        /// <param name="tournamentId">Id of tournament</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task LeaveTournamentAsync(Guid tournamentId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/tournaments/{tournamentId}/teams/me");
    
            if (tournamentId == null)
                throw new ArgumentNullException("tournamentId");
            url_ = url_.Replace("{tournamentId}", Uri.EscapeDataString(tournamentId.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                return;     
     
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public partial class UserClient : ImperaHttpClient
    {
        public UserClient() : this("") { }
    
        public UserClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Find users starting with the given query</summary>
        /// <param name="query">Query to search for</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public Task<List<UserReference>> FindUsersAsync(string query)
        {
            return FindUsersAsync(query, CancellationToken.None);
        }
    
        /// <summary>Find users starting with the given query</summary>
        /// <param name="query">Query to search for</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ImperaPlusException">A server side error occurred.</exception>
        public async Task<List<UserReference>> FindUsersAsync(string query, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/users/find/{query}");
    
            if (query == null)
                throw new ArgumentNullException("query");
            url_ = url_.Replace("{query}", Uri.EscapeDataString(query.ToString()));
    
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(List<UserReference>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<List<UserReference>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new ImperaPlusException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new ImperaPlusException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    

    

    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public class ImperaPlusException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public ImperaPlusException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "6.15.6138.26180")]
    public class ImperaPlusException<TResponse> : ImperaPlusException
    {
        public TResponse Response { get; private set; }

        public ImperaPlusException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}